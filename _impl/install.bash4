#!/bin/bash
## Shebang helps the editor to correctly render colors.

## Macros (ECHO, ECHO2, NOTE, HAS) are defined in _impl/write.sh

## NOTE: better to surround expansions with double quotes
## ####  if they might contain spaces.


install::check_arguments () {
  local allowed='bash+/zsh+, bash/zsh, nvim/vim, tmux, jupyter'
  local arg

  if [[ $# -ne 0 ]]; then
    local ok=true

    for arg in $@; do
      [[ " $(tr ,/ ' ' <<< $allowed)" =~ " $arg" ]] || { ok=false; break; }
    done

    $ok && return
    echo -e "Invalid argument: $arg\n"
  fi

  echo 'Usage: ./evangelist.sh install <args>'
  echo Arguments: $allowed.
  echo
  echo zsh+ includes all settings except for bash and jupyter.
  echo Similarly, bash+ implies all but zsh and jupyter.
  echo 'nvim and vim arguments are identical for `install`.'
  exit
}


install::vim_settings () {
  ## Go on with Neovim if available, otherwise with Vim
  local VIM VIMPLUG code=0

  ## realpath is not available on OSX.
  # [[ $(realpath $(which vim)) =~ nvim ]] && (( code+=1 ))
  HAS vim && (( code+=1 ))
  HAS nvim && (( code+=2 ))

  [[ $code -eq 0 ]] && { ECHO2 Missing: vim, neovim; return 1; }
  ! grep -qE '^(z|ba)sh' .update-list
  code+="$?"

  ECHO Installing Vim configuration..

  ## Make an "alias" for pip3
  (! HAS pip && HAS pip3) && pip () { pip3 $@; }

  ## NOTE: case fallthrough (;&) and resume (;;&) are available in bash >= 4.0
  ## NOTE: zsh's 'case resume' is different - `;|`
  case $code in
    1?)
      VIM=vim
      VIMPLUG=~/.vim/autoload/plug.vim
      mkdir -p "$XDG_DATA_HOME/nvim/site/undo"
      utils::back_up_original_configs $VIM \
        f:~/.vimrc d:"$XDG_CONFIG_HOME/nvim"
      ;;&

    [23]?)
      if ! HAS npm
      then
        echo Installing npm..
        conda install -yc conda-forge nodejs &> /dev/null \
          && echo - Installed nodejs. \
          || echo Failed to install with conda: nodejs
      else
        echo Checking if possible to update 'node' via conda..
        conda update -y nodejs
      fi

      ## Optional deps of Neovim providers (npm and python)
      echo "Checking optional providers' deps.."
      echo "(Missing ones will be installed if possible)"

      ## It turns out to be faster to check whether the package
      ## is installed by re-executing teh installation command rather
      ## than querying its installation status with a special command.

      npm install -g neovim &> /dev/null \
        && echo - [OK] neovim-client. \
        || echo "Cannot execute: npm install -g neovim"
      pip install pynvim &> /dev/null \
        && echo - [OK] pynvim. \
        || echo "Cannot execute: pip install pynvim"

      VIM=nvim
      VIMPLUG="$XDG_DATA_HOME/nvim/site/autoload/plug.vim"
      utils::back_up_original_configs $VIM d:"$XDG_CONFIG_HOME/nvim"
      grep -q '^vim' .update-list && sed -i '/^vim/d' .update-list
      ;;&

    *)
      ## Copy new configs
      cp -R conf/nvim "$XDG_CONFIG_HOME"
      ;;&

    ?0)
      ## Check if need to expand $EVANGELIST
      sed -ri -e 's;\$EVANGELIST[.\"]*;'"$PWD"';' \
        -e 's;(filereadable\()(.+\));\1"\2;' \
        -e 's;\$XDG_CONFIG_HOME;'"$XDG_CONFIG_HOME"';' \
        "$XDG_CONFIG_HOME/nvim/init.vim"
      ;;&

    10)
      rm -f ~/.vimrc
      ln -s "$XDG_CONFIG_HOME"/nvim/init.vim ~/.vimrc
      ;;

    11)
      export MYVIMRC="$XDG_CONFIG_HOME/nvim/init.vim"
      export VIMINIT=":source $MYVIMRC"
      ;;

    30)
      utils::resolve_vim_alternatives
      ;;
  esac

  ## Install vim-plug if it is not there yet
  if ! [[ -f "$VIMPLUG" ]]; then
    sh -c "curl -sS -fLo $VIMPLUG --create-dirs \
      https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim"
  fi

  set_assembly=minimal
  if [[ -n $_EXTEND ]]; then
    sed -i 's;^" ;;' "$XDG_CONFIG_HOME"/nvim/init.vim
    sed -i 's;source .*ycm\.vim;" &;' "$XDG_CONFIG_HOME"/nvim/init.vim
    ## CoC is chosen to be a default code-completion engine,
    ## YCM is commented out, therefore.

    if utils::dummy_v1_gt_v2 $(node --version) v12.12
    then
      ## `&` in the following line means "use the whole text matched".
      sed -i 's;source .*coc\.vim;" &;' "$XDG_CONFIG_HOME"/nvim/init.vim
    fi
    set_assembly=extended
  fi

  assembly=$(grep 'VIM ASSEMBLY:' .update-list | cut -d ':' -f2)
  if [[ $set_assembly != $assembly ]]; then
    sed -i "/^Installed/i VIM ASSEMBLY:$set_assembly" .update-list
    [[ -n $assembly ]] && sed -i "/VIM ASSEMBLY:$assembly/d" .update-list
  fi

  ## Install Vim plugins silently (save installation summary)
  if [[ $TERM != dumb ]]; then
    $VIM +PlugInstall +'%w /tmp/vim-plug.log' +qa &> /dev/null
    ## NOTE: During interactive installation, the hanging happens
    ## if some of the plugins being installed throw an error. If the latter
    ## is the case, evangelist will not finish the procedure unless the user
    ## hits ENTER the necessary number of times (one, two, or more).
  else
    ## For non-interactive installation, either one of two commands
    ## is used, depending on whether Vim or Neovim is chosen:

    # nvim --headless +PlugInstall +qa
    # vim +PlugInstall +qa > /dev/null

    ## The latter command produces the warnings:

    ## Vim: Warning: Output is not to a terminal
    ## Vim: Warning: Input is not from a terminal

    ## Though it does the work. Check for a better solution
    ## that might appear with the upcoming package releases.

    cmd="$VIM "
    [[ $VIM = nvim ]] && cmd+='--headless '
    cmd+='+PlugInstall +qa'
    [[ $VIM = vim ]] && cmd+=' > /dev/null'
    eval "$cmd"
  fi

  if [[ -s /tmp/vim-plug.log ]]; then
    echo Vim plugin installation summary:
    cat /tmp/vim-plug.log && rm -f /tmp/vim-plug.log
  fi

  ## _ARG can be any, but VIM is specific.
  _PARAMS=( ${_PARAMS[@]/$_ARG/$VIM} )

  ECHO Successfully installed: Vim configuration.
}


install::jupyter_settings () {
  ## Check if pip and git are available
  (HAS pip || HAS pip3) || { ECHO2 Missing pip3; return 1; }
  HAS git || { ECHO2 Missing git; return 1; }

  ## Make an "alias" for pip3
  (! HAS pip && HAS pip3) && pip () { pip3 $@; }

  ECHO Installing Jupyter configuration..

  echo Checking required packages..
  echo "(Missing ones will be installed if possible)"
  ## - jupyter
  ## - jupyter_contrib_nbextensions
  ## - jupyter_nbextensions_configurator

  ## Install Jupyter if need be
  HAS jupyter \
    || { pip install -q jupyter \
         && HAS jupyter && echo - Installed jupyter.; } \
      || { ECHO2 Jupyter is not accessible.; return 1; }

  local JUPCONFDIR=$(jupyter --config-dir)

  utils::back_up_original_configs jupyter \
    f:"$JUPCONFDIR/custom/custom.js" \
    f:"$JUPCONFDIR/nbconfig/notebook.json"

  ## Install nbextensions if need be
  if ! pip show -qq jupyter_contrib_nbextensions
  then
    pip install -q jupyter_contrib_nbextensions \
      && echo - Installed jupyter_contrib_nbextensions. \
      || return 1
  fi

  ## Add extension tab in Jupyter Notebook if need be
  if ! pip show -qq jupyter_nbextensions_configurator
  then
    pip install -q jupyter_nbextensions_configurator \
      && echo - Installed jupyter_nbextensions_configurator. \
      || return 1
  fi

  echo Ready to install jupyter-vim-bindings.
  local JUPVIM="$(jupyter --data-dir)/nbextensions/vim_binding"
  [[ -d "$JUPVIM" ]] && rm -rf "$JUPVIM"

  ## Install Vim in Jupyter Notebook
  {
    git clone -q https://github.com/lambdalisue/jupyter-vim-binding "$JUPVIM";
    jupyter nbextension enable vim_binding/vim_binding; # add log lvl control?
    jupyter contrib nbextension install --user --JupyterApp.log_level='WARN';
  } || return 1

  ## Copy new configs
  mkdir -p "$JUPCONFDIR/custom"
  mkdir -p "$JUPCONFDIR/nbconfig"
  cp conf/jupyter/custom.js "$JUPCONFDIR/custom"
  cp conf/jupyter/notebook.json "$JUPCONFDIR/nbconfig"

  ECHO Successfully installed: Jupyter configuration.
}


install::tmux_settings () {
  ## Check if Tmux is available
  HAS tmux || { ECHO2 Missing tmux; return 1; }

  ECHO Installing Tmux configuration..

  utils::back_up_original_configs tmux \
    f:~/.tmux.conf f:"$XDG_CONFIG_HOME/tmux/tmux.conf"

  ## Tmux version determines where to put Tmux configs
  local VERSION=$(tmux -V | sed -En 's/^tmux ([.0-9]+).*/\1/p')

  ## Copy new configs
  utils::dummy_v1_gt_v2 $VERSION 3.1 \
    && cp -R conf/tmux "$XDG_CONFIG_HOME" \
    || cp conf/tmux/tmux.conf ~/.tmux.conf

  ECHO Successfully installed: Tmux configuration.
}


install::bash_settings () {
  ECHO Installing BASH configuration..

  utils::back_up_original_configs bash \
    f:~/.bashrc f:~/.inputrc f:~/.condarc

  ## Copy new configs
  cp conf/bash/bashrc ~/.bashrc
  cp conf/bash/inputrc ~/.inputrc

  write::file_header ~/.bashrc

  ## Add conda init to .bashrc
  conda &> /dev/null \
    && (conda init bash > /dev/null; conda config --set changeps1 False) \
    || ECHO2 "conda doesn't seem to work."

  ## Dynamic imports should make the last line in rc files.
  write::dynamic_imports ~/.bashrc

  ## Transfer the old history
  local NEWHISTFILE="$HOME/.bash_history"
  [[ -n "$HISTFILE" && "$HISTFILE" != "$NEWHISTFILE" ]] \
    && cp "$HISTFILE" "$NEWHISTFILE"

  ECHO Successfully installed: BASH configuration.
}


install::zsh_settings () {
  ## Check if zsh and git are available
  HAS zsh || { ECHO2 Missing zsh; return 1; }
  HAS git || { ECHO2 Missing git; return 1; }

  ECHO Installing ZSH configuration..

  [[ -z "$ZDOTDIR" ]] && export ZDOTDIR="$XDG_CONFIG_HOME/zsh"

  utils::back_up_original_configs zsh \
    f:~/.zshenv f:~/.zshrc d:"$ZDOTDIR":zdotdir

  mkdir -p "$ZDOTDIR"

  ## If there was no ~/.zshrc, remove it later
  ## (BUG: conda init generates dummy .zshrc in $HOME ignoring $ZDOTDIR)
  ls ~/.zshrc &> /dev/null
  local CODE=$?

  ## Copy new configs
  cp conf/zsh/zshrc "$ZDOTDIR/.zshrc"
  cp conf/zsh/agkozakrc "$ZDOTDIR"
  cp conf/zsh/zshenv ~/.zshenv

  if [[ $(uname) = Darwin ]]; then
    cp conf/zsh/macos.zsh "$ZDOTDIR/extra.zsh"
  else
    cp conf/zsh/extra.zsh "$ZDOTDIR"
  fi

  write::file_header ~/.zshenv

  if [[ ! -f "$ZDOTDIR/.zcomet/bin/zcomet.zsh" ]]; then
    git clone https://github.com/agkozak/zcomet.git "$ZDOTDIR/.zcomet/bin"
    echo Installed zcomet.
  fi

  ## Add conda init to .zshrc
  conda &> /dev/null \
    && conda init zsh > /dev/null \
    || ECHO2 "conda doesn't seem to work"

  ## Deal with miniconda's bug
  grep -q '>>> conda init >>>' "$ZDOTDIR/.zshrc" \
    || sed -n '/> conda init/,/< conda init/p' \
         ~/.zshrc >> "$ZDOTDIR/.zshrc" 2> /dev/null

  [[ $CODE -gt 0 ]] && rm -f ~/.zshrc

  ## Dynamic imports should make the last line in rc files.
  write::dynamic_imports "$ZDOTDIR/.zshrc"

  ## Transfer the old history
  local NEWHISTFILE="$XDG_DATA_HOME/zsh_history"
  [[ -n "$HISTFILE" && "$HISTFILE" != "$NEWHISTFILE" ]] \
    && cp "$HISTFILE" "$NEWHISTFILE"

  ECHO Successfully installed: ZSH configuration.
}

